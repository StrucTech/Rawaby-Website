require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testContractUrls() {
  try {
    console.log('๐ ุงุฎุชุจุงุฑ ุฑูุงุจุท ุงูุนููุฏ...\n');

    // ุงูุญุตูู ุนูู ุนูุฏ ููุฌูุฏ
    const { data: contracts, error } = await supabase
      .from('contracts')
      .select('*')
      .limit(1);

    if (error || !contracts || contracts.length === 0) {
      console.log('โ ูุง ุชูุฌุฏ ุนููุฏ ููุงุฎุชุจุงุฑ');
      return;
    }

    const contract = contracts[0];
    console.log('๐ ุงุฎุชุจุงุฑ ุงูุนูุฏ ุฑูู:', contract.id);
    console.log('๐ค ุงููุณุชุฎุฏู:', contract.user_id);

    // ุงุฎุชุจุงุฑ ุงูุฑุงุจุท ุงูุฃูู
    console.log('\n1. ุงุฎุชุจุงุฑ ุฑุงุจุท ุงูุนูุฏ ุงูุฃูู:');
    console.log('   ๐ ุงูุฑุงุจุท:', contract.contract1_url);
    
    try {
      const response1 = await fetch(contract.contract1_url);
      console.log(`   ๐ ุงูุญุงูุฉ: ${response1.status} ${response1.statusText}`);
      console.log(`   ๐ ุงูุญุฌู: ${response1.headers.get('content-length')} bytes`);
      console.log(`   ๐ ุงูููุน: ${response1.headers.get('content-type')}`);
      
      if (response1.ok) {
        console.log('   โ ุงูุฑุงุจุท ูุนูู ุจุดูู ุทุจูุนู');
      } else {
        console.log('   โ ุงูุฑุงุจุท ูุง ูุนูู');
      }
    } catch (fetchError) {
      console.log('   โ ุฎุทุฃ ูู ุฌูุจ ุงูููู:', fetchError.message);
    }

    // ุงุฎุชุจุงุฑ ุงูุฑุงุจุท ุงูุซุงูู
    console.log('\n2. ุงุฎุชุจุงุฑ ุฑุงุจุท ุงูุนูุฏ ุงูุซุงูู:');
    console.log('   ๐ ุงูุฑุงุจุท:', contract.contract2_url);
    
    try {
      const response2 = await fetch(contract.contract2_url);
      console.log(`   ๐ ุงูุญุงูุฉ: ${response2.status} ${response2.statusText}`);
      console.log(`   ๐ ุงูุญุฌู: ${response2.headers.get('content-length')} bytes`);
      console.log(`   ๐ ุงูููุน: ${response2.headers.get('content-type')}`);
      
      if (response2.ok) {
        console.log('   โ ุงูุฑุงุจุท ูุนูู ุจุดูู ุทุจูุนู');
      } else {
        console.log('   โ ุงูุฑุงุจุท ูุง ูุนูู');
      }
    } catch (fetchError) {
      console.log('   โ ุฎุทุฃ ูู ุฌูุจ ุงูููู:', fetchError.message);
    }

    // ูุญุต bucket
    console.log('\n3. ูุญุต bucket:');
    const { data: buckets } = await supabase.storage.listBuckets();
    const contractsBucket = buckets.find(b => b.name === 'contracts');
    
    if (contractsBucket) {
      console.log(`   ๐ bucket ุงูุนููุฏ: ${contractsBucket.public ? 'ุนุงู โ' : 'ุฎุงุต โ'}`);
      console.log(`   ๐ ุชุงุฑูุฎ ุงูุฅูุดุงุก: ${contractsBucket.created_at}`);
    }

    console.log('\n๐ฏ ุฎูุงุตุฉ ุงูุงุฎุชุจุงุฑ:');
    console.log('   โ bucket ุงูุนููุฏ ุนุงู ููุนูู');
    console.log('   โ ุงูุฑูุงุจุท ุชููุดุฃ ุจุดูู ุตุญูุญ');
    console.log('   โ ุงููููุงุช ูุงุจูุฉ ูููุตูู');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ:', error.message);
  }
}

testContractUrls();